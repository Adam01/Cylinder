@external
class Observable:
    def removeCallbacks(self):
        pass


define(["Observable"], def(Observable):

    def hasValue(obj, val, checkProtos=True, recursive=True):
        for prop in Object.keys(obj):
            if obj[prop] == val:
                return True

        if checkProtos and obj.__proto__:
            return hasValue(obj.__proto__, val, recursive)

        return False

    class BoundObserver(Observable):
        def __init__(self):
            Observable.__init__(self)
            self.__subscribedTo = []
            self.__REMOVE = "ObserverRemove"

        def removeCallbacks(self,name,obj,fn,notify=True):
            #objCount, fnCount = self.countCallbacks(name, obj, fn)
            #if ( objCount or fnCount ) and notify:
            if notify:
                self.notify(self.__REMOVE, obj, fn, name)
            Observable.removeCallbacks(self,name,obj,fn)

        def unbindCallbacks(self):
            # Remove what this has subscribed to
            for subject in self.__subscribedTo:
                subject.removeCallbacks(None, self, None, False)
            self.__subscribedTo = None

        def __addSubscriber(self, subject, name, callback, boundArgs):
            if boundArgs.length:
                callback = callback.bind(self, *boundArgs)

            if subject not in self.__subscribedTo:
                subject.subscribe(self.__REMOVE, self, def(obj,fn,name):
                    if obj is None or obj == self:
                        loc = self.__subscribedTo.indexOf(subject)
                        if loc != -1:
                            self.__subscribedTo.splice(loc,1)
                )
                self.__subscribedTo.push(subject)

            return callback

        def subscribeTo(self, subject, name, callback, *boundArgs):
            fn = self.__addSubscriber(subject,name, callback, boundArgs)
            subject.subscribe(name,self, fn)

        def subscribeOnceTo(self, subject, name, callback, *boundArgs):
            fn = self.__addSubscriber(subject,name, callback, boundArgs)
            subject.subscribeOnce(name, self, fn)

    return BoundObserver
)