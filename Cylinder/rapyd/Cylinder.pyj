@external
class Connection:
    pass

@external
class FileSystemSource:
    pass

@external
module Widgets:
    @external
    class Connection:
        pass
    @external
    class CommandLine:
        pass
    @external
    class TreeView:
        pass
    @external
    class Frame:
        pass
    @external
    class DirectoryList:
        pass
    @external
    class CodeMirrorWidget:
        pass


require.config({
    baseUrl: "./js"
})

require( ["Widgets", "Connection", "FileSystemSource","PathUtil"], main)


def main(Widgets, Connection, FileSystemSource, PathUtil):

    topSection = Widgets.Frame("#TopSection")
    midSection = Widgets.Frame("#MiddleSection")
    bottomSection = Widgets.Frame("#BottomSection")

    connection = Connection()
    Widgets.Connection(Widgets.Frame("#ConnectionContainer"), connection)
    #Widgets.CommandLine(bottomSection, connection)
    fs = FileSystemSource(connection)

    treeView = Widgets.TreeView(Widgets.Frame("#FileTree"), fs )
    directoryList = Widgets.DirectoryList(Widgets.Frame("#CurrentDirectory"), fs)
    editor = Widgets.CodeMirrorWidget(Widgets.Frame("#Editor"), fs)

    directoryList.subscribeTo(treeView, treeView.ITEM_CLICKED, def(node):
        directoryList.fetchDir(node.data.path)
    )

    treeView.subscribeTo(directoryList, directoryList.UPDATED, treeView.activatePath)

    editor.subscribeTo(directoryList, directoryList.EDIT_FILE, editor.loadFromServer)

    connection.subscribe(connection.AUTHENTICATE, this, def():
        fs.getPathSeparator(def(ps):
            PathUtil.setPathSep(ps)
        )
        fs.fetchDirectory("~", def(path, list):
            treeView.onListHomeDir(path, list)
            directoryList.onListDir(path, list)
        )
        directoryList.resize(None,700)
        treeView.resize(None,700)
        editor.resize(None,700)
    )





String.prototype.capitalise = def():
    return this.charAt(0).toUpperCase() + this.slice(1)

