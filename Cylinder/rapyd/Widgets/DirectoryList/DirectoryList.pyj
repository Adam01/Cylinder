@external
class Widget:
    @staticmethod
    def getWidgetByID(id):
        pass
    def remove(self):
        pass

@external
class DirectoryListRow:
    pass

@external
class ContextMenu:
    pass

define(["Widget","Widgets/DirectoryListRow/DirectoryListRow", "Widgets/ContextMenu/ContextMenu"], main)

DOMString = \
"""<div class="DirectoryList ui-widget">
    <table class="DirectoryListTable ui-widget-content" >
        <thead class="DirectoryListHeader ui-widget-header ui-corner-all">
            <tr class="DirectoryListHeaderRow ">

            </tr>
        </thead>

        <tbody class="DirectoryListBody">

        </tbody>
    </table>
</div>"""

def main(Widget, DirectoryListRow, ContextMenu):

    class DirectoryList(Widget):
        def __init__(self, parentWidget, fs):
            Widget.__init__(self, "DirectoryList", parentWidget)

            self.fs = fs
            self.path = None
            self.data = None
            self.columnFields = ["title", "size", "owner", "modified"]
            self.rows = []

            self.UPDATED = "OnUpdate"
            self.ITEM_DBL_CLICKED = "OnItemDblClick"
            self.ITEM_SELECTED = "OnItemSelection"

            def ready():
                self.contextMenu = ContextMenu(self, ".DirectoryListRow")
                self.contextMenu.addItems([
                    {title: "Rename", uiIcon: "ui-icon-pencil"},
                    {title: "Trash", uiIcon: "ui-icon-trash"},
                    {title: "Delete", uiIcon: " ui-icon-closethick"},
                    {title: "Make a copy", cmd: "Copy", uiIcon: "ui-icon-copy"}
                ])
                self.subscribeTo(self.contextMenu, self.contextMenu.ITEM_SELECTED, self.onContextMenuSelect)

            self.subscribe(self.LOADED_HTML, self, ready)


        def getDOMString(self):
            nonlocal DOMString
            return DOMString

        def getRowByID(self, widgetID):
            for item in self.rows:
                if item.WidgetID == widgetID:
                    return item
            return None

        def onContextMenuSelect(self, cmd, target):
            console.log(cmd, target, Widget.getWidgetByID(target.attr("WidgetID")))


        def onItemSelected(self, ev, ui):
            selected = []
            self.$element.find(".DirectoryListRow.ui-selected").each(def():
                selected.push( self.getRowByID( $(this).attr("WigdetID") ) )
            )
            self.notify(self.ITEM_SELECTED, selected)

        def fetchDir(self, path):
            self.fs.fetchDirectory(path, self.onListDir.bind(self))

        def getPath(self):
            return self.path

        def getList(self):
            return self.list

        def onRowDblClick(self, row, ev):
            if row.item.type == "directory":
                self.fetchDir(row.item.path)
            self.notify(self.ITEM_DBL_CLICKED, row)

        def clear(self):
            self.$element.find(".DirectoryListTable").colResizable({disable: true})

            $head = self.$element.find(".DirectoryListHeaderRow")
            $head.find(".DirectoryListHeaderCell").remove()

            if self.$element.find(".DirectoryListRow").size():
                self.$element.selectable( "destroy" )

            self.$element.find(".DirectoryListBody").html("")
            for row in self.rows:
                row.remove(False)
            self.rows = []


        def onListDir(self, path, list):
            self.path = path
            self.list = list
            self.update()

        def addItem(self, item):
            row = DirectoryListRow(self, item)
            self.subscribeTo(row, row.DBL_CLICKED, self.onRowDblClick)
            self.rows.push(row)
            return row

        def redraw(self):
            self.clear()
            $head = self.$element.find(".DirectoryListHeaderRow")

            self.$element.find(".DirectoryListBody").hide()

            parentDirectory = {}

            for column in self.columnFields:
                $cell = $("<th class='DirectoryListHeaderCell'></th>")
                $cell.text(column)
                $head.append($cell)
                parentDirectory[column] = ""

            parentDirectory.title = ".."
            parentDirectory.type = "directory"
            parentDirectory.path = self.path + "/.."
            self.addItem(parentDirectory)

            for item in self.list:
                self.addItem(item)

            self.$element.find(".DirectoryListTable").colResizable({liveDrag: true, partialRefresh: true, postbackSafe: true, minWidth: 50})
            self.$element.selectable({
                    filter: ".DirectoryListRow",
                    stop: self.onItemSelected.bind(self),
                    cancel: ".ui-selected",
                })
            self.$element.find(".DirectoryListBody").show()
            #self.contextMenu.reApply()

            self.notify(self.UPDATED, self.path)

        def update(self):

            if self.rows.length == 0 or self.rows[0].cells.length != self.columnFields.length:
                return self.redraw()

            self.$element.find(".DirectoryListBody").hide()
            self.$element.find(".DirectoryListTable").colResizable({disable: true})

            self.rows[0].item.path = self.path + "/.."
            row_i = 1
            row_count = self.rows.length
            last_added = None
            for item in self.list:
                if row_i >= row_count:
                    last_added = self.addItem(item)
                else:
                    self.rows[row_i].updateFromItem(item)
                row_i += 1
            while row_i < row_count:
                self.rows[row_i].remove()
                self.rows.splice(row_i,1)
                row_count -= 1


            def reshow():
                self.$element.find(".DirectoryListBody").show()
                self.$element.find(".DirectoryListTable").colResizable({liveDrag: true, partialRefresh: true, postbackSafe: true, minWidth: 50})
                self.$element.selectable({
                    filter: ".DirectoryListRow",
                    stop: self.onItemSelected.bind(self),
                    cancel: ".ui-selected",
                })
               # self.contextMenu.reApply()

            # Show when last row has loaded
            if last_added is not None:
                self.subscribeTo(last_added, last_added.LOADED_HTML, reshow)
            else:
                reshow()

            self.notify(self.UPDATED, self.path)

        def remove(self, removeFromDOM=True):
            self.clear()
            Widget.remove(self, removeFromDOM)





    return DirectoryList