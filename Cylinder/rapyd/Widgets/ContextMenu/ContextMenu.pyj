@external
class Widget:
    def remove(self):
        pass

define(["Widget"], main)

def main(Widget):
    class ContextMenu(Widget):
        def __init__(self, parentWidget, delegate ):
            Widget.__init__(self, None, parentWidget)
            self.delegate = delegate
            self.ITEM_SELECTED = "OnContextMenuItemSelect"
            self.$container = self.getParent().$element
            self.items = []
            self.__setup()

        def __setup(self):
            self.$container.contextmenu({
                autoFocus: True,
                delegate: self.delegate,
                hide: False,
                menu: self.items,
                preventContextMenuForPopup: False,
                preventSelect: True,
                show: False,
                tapHold: True,
                select: self.onItemSelect.bind(self),
                ignoreParentSelect: True
            })

        def reApply(self):
            self.$container.contextmenu("destroy")
            self.__setup()
            return self

        def onItemSelect(self, ev, ui):
            data = {closeMenu: True}
            self.notify(self.ITEM_SELECTED, ui.cmd, ui.target.closest(self.delegate), data)
            return data.closeMenu

        def __replaceMenu(self):
            self.$container.contextmenu("replaceMenu", self.items)
            return self

        def __correctItem(self, item):
            if item.cmd is None:
                item.cmd = item.title

        def addItems(self, items):
            for item in items:
                self.__correctItem(item)
                self.items.push(item)
            return self.__replaceMenu()

        def replaceItems(self, items):
            self.items = []
            for item in items:
                self.__correctItem(item)
                self.items.push(item)
            return self.__replaceMenu()

        def addItem(self, item ):
            self.__correctItem(item)
            self.items.push(item)
            return self.__replaceMenu()

        def setItemVisible(self, title, visible):
            cmd = "cmd_" + title
            self.$container.contextmenu("showEntry", cmd, visible)
            return self

        def setItemEnabled(self, title, enable):
            cmd = "cmd_" + title
            self.$container.contextmenu("enableEntry", cmd, enable)
            return self

        def isOpen(self):
            return self.$container.contextmenu("isOpen")

        def open(self, target):
            self.$container.contextmenu("open", target )
            return self

        def close(self):
            self.$container.contextmenu("close")
            return self

        def remove(self):
            self.$container.contextmenu("destroy")
            Widget.remove(self)


    return ContextMenu