@external
class Widget:
    @staticmethod
    def getWidgetByID():
        pass
    pass

@external
class Draggable:
    pass

define(["Widget", "Widgets/EntityField/EntityField", "Helpers/Draggable"], main)

def main(Widget, EntityField, Draggable):
    class DirectoryListRow(Widget):
        def __init__(self, parentWidget, item):
            Widget.__init__(self, "DirectoryListRow", parentWidget, ".DirectoryListBody")

            self.DBL_CLICKED = "OnDoubleClick"
            self.CLICKED = "OnClick"

            self.item = item
            self.cells = []
            self.iconElement = None

            def setup():

                self.$element.dblclick(self.notify.bind(self, self.DBL_CLICKED, self))
                self.$element.click(self.notify.bind(self, self.CLICKED, self))

                self.draggable = Draggable(self, parentWidget.$element.find(".DirectoryListBody"))

                self.$element.droppable({
                    accept: "",
                    activeClass: "DropAvailable",
                    hoverClass: "DropHover",
                    drop: self.__onDrop.bind(self),
                    tolerance: "pointer"
                })

                if self.item:
                    self.setFromItem(self.item)


            self.subscribe(self.LOADED_HTML, self, setup)

        def getItem(self):
            return self.item

        def __onDrop(self,ev,ui):
            paths = []
            selected = ui.helper.data("selected")
            selected.each(def(i,element):
                w = Widget.getWidgetByID($(element).attr("WidgetID"))
                if w is not None and w.getItem is not undefined:
                    paths.push(w.getItem().path)
            )
            console.log("Stuff dropped on", self.item.title, paths)
            pass

        def getCellByColumnName(self, name):
            cell_i = 0
            for column in self.parent.columnFields:
                if column == name:
                    break;
                cell_i += 1
            if cell_i < self.cells.length:
                return self.cells[cell_i]

        def clear(self):
            self.$element.html("")
            for cell in self.cells:
                cell.remove(False)
            self.cells = []

        def specialise(self):
            self.$element.removeClass("FileEntity")
            self.$element.removeClass("DirectoryEntity")
            self.$element.addClass( self.item.type.capitalise() + "Entity")

            if self.item.type == "directory":
                self.$element.droppable("option", "accept", ".FSEntity")
                self.iconElement.addClass("ui-icon-folder-collapsed")
                self.iconElement.removeClass("ui-icon-document")
            else:
                self.$element.droppable("option", "accept", "")
                self.iconElement.removeClass("ui-icon-folder-collapsed")
                self.iconElement.addClass("ui-icon-document")


        def setFromItem(self, item):
            self.clear()
            self.item = item
            for column in self.parent.columnFields:
                self.addCell(column, self.item[column])

            self.specialise()

        def updateFromItem(self, item):
            if self.parent.columnFields.length != self.cells.length:
                return self.setFromItem(item)

            self.item = item
            cell_i = 0
            for column in self.parent.columnFields:
                self.cells[cell_i].setValue(self.item[column])
                cell_i += 1

            self.specialise()


        def onFieldChange(self, field, name, value):
            self.notify(self.FIELD_CHANGED, field, name, value)


        def addCell(self, column, name):
            td = $("<td class='DirectoryListCell'></td>")
            if self.cells.length == 0:
                self.iconElement = $("<span class='FSIcon ui-icon'></span>")
                td.append(self.iconElement)

            self.$element.append(td)
            if column == "title" and self.item.type == "directory" and self.item.title == "..":
                #Make the factory default to text field
                column = "_"
            cell = EntityField.FieldFactory(column, name, self, td, EntityField.TextField)

            self.subscribeTo(cell, cell.VALUE_CHANGED, self.onFieldChange, cell)
            self.cells.push(cell)

        def remove(self, removeFromDOM=True):
            self.clear()
            Widget.remove(self, removeFromDOM)


    return DirectoryListRow