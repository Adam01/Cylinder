@external
class Widget:
    pass

define(["Widget", "PathUtil"], main)

def main (Widget, PathUtil):

    class TreeView(Widget):
        def __init__(self, parentWidget, datasource):
            Widget.__init__(self, "TreeView", parentWidget)

            self.UPDATE = "OnUpdate"
            self.ITEM_EXPANDED = "OnItemExpand"
            self.ITEM_CLICKED = "OnItemClick"

            self.fs = datasource
            self.fancytree = None
            self.data = None
            self.collapse_inactive = True
            self.show_files = False

            self.showSystem = False
            self.showHidden = True

            def setup():
                self.$element.fancytree({
                    expand: self.onItemExpand.bind(self),
                    click: self.onItemClick.bind(self),
                    lazyLoad: def(e,d):
                        d.result = []
                })
                self.fancytree = self.$element.fancytree("getTree")
                self.setVisible(True)


            self.subscribe(self.LOADED_HTML, self, setup)


        def onItemClick(self, ev, data):
            if data.targetType == "title":
                self.notify(self.ITEM_CLICKED, data.node)

        def fetchNodeContents(self, node):
            self.fs.fetchDirectory(node.data.path, self.onListNodeDir.bind(self, node))

        def findInNodeList(self, list, key):
            for node in list:
                if node.key == key:
                    return node
            return None

        def collapseChildren(self, node, not_ancestor_of=None):
            children = node.getChildren()
            if children:
                for child in children:
                    if child.isExpanded():
                        if not not_ancestor_of or ( not not_ancestor_of.isDescendantOf(child) and not_ancestor_of != child ):
                            child.setExpanded(False)

        def collapseTop(self, not_ancestor_of=None):
            node = self.fancytree.getFirstChild()
            if node:
                self.collapseChildren(node, not_ancestor_of)


        def expandAncestors(self, node, collapseSiblings=True):
            parents = node.getParentList(True)
            if parents:
                for p in parents:
                    if not p.isExpanded():
                        p.setExpanded(True)
                    if collapseSiblings:
                        self.collapseChildren(p, node)




        def activatePath(self, path):
            targetNode = self.fancytree.getNodeByKey(path)
            if targetNode is not None:
                if self.collapse_inactive:
                    self.collapseTop(targetNode)
                targetNode.setActive(True)
                self.expandAncestors(targetNode, self.collapse_inactive)
                self.fetchNodeContents(targetNode)
                self.collapseChildren(targetNode)


        def onListNodeDir(self, targetNode, path, list):
            newChildren = self.toFancyTreeList(list)

            if targetNode is not None:
                currentChildren = targetNode.getChildren()
                if currentChildren:
                    for child in currentChildren:
                        if self.findInNodeList(newChildren, child.key) is None:
                            targetNode.removeChild(child)

                    for child in newChildren:
                        if self.findInNodeList(currentChildren, child.key) is None:
                            targetNode.addNode(child)
                else:
                    targetNode.addChildren(newChildren)

                if not targetNode.isExpanded(True):
                    targetNode.setExpanded(True)


        def onItemExpand(self, ev, data):
            if data.node.isFolder():
                self.fetchNodeContents(data.node)
            self.notify(self.ITEM_EXPANDED, data.node.data)

        def setVisible(self, v):
            if v:
                self.$element.find("ul").removeClass("ui-helper-hidden")
            else:
                self.$element.find("ul").addClass("ui-helper-hidden")

        def onListHomeDir(self, path, list):
            self.fancytree.reload(self.toFancyTree(path,list,True))

        def toFancyTreeList(self, list):
            nodes = []
            for entity in list:
                if not self.show_files and entity.type == "file":
                    continue
                if not self.showSystem and entity.owner == "SYSTEM":
                    continue
                if not self.showHidden and entity.title.startsWith("."):
                    continue
                nodes.push(self.toFancyTreeNode(entity))
            return nodes

        def toFancyTreeNode(self, entity):
            node = {}
            node.title = entity.title
            node.data = {}
            node.data.type = entity.type
            node.data.path = entity.path
            node.folder = entity.type == "directory" ? True : False
            node.iconClass = entity.type == "directory" ? "ui-icon ui-icon-folder-collapsed" : "ui-icon ui-icon-document"
            node.key = entity.path

            if node.folder:
                node.children = []
                node.expanded = False
                node.lazy = True

            return node

        def toFancyTree(self, path, list):
            nodes = PathUtil.explode(path)

            source = {}
            source.title = nodes[-1]
            source.folder = True
            source.expanded = True
            source.key = path
            source.data = {}
            source.data.path = path

            source.children = self.toFancyTreeList(list)

            return  [ source ]

    return TreeView