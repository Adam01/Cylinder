@external
class Widget:
    pass

define(["Widget", "PathUtil"], main)

def main(Widget, PathUtil):

    class EntityField(Widget):

        def __init__(self, parentWidget, name=None, selector=None):
            Widget.__init__(self, "EntityField", parentWidget, selector)
            self.VALUE_CHANGED = "OnChangeValue"
            self.name = name

        def setValue(self, value):
            self.$element.text(value)

        def getValue(self):
            return self.$element.text()

        def getName(self):
            return self.name

        def setName(self, name):
            self.name = name


    # Editable field
    class TitleField(EntityField):

        def __init__(self, parentWidget, name=None, value=None, selector=None, Editable=False):
            EntityField.__init__(self, parentWidget, name, selector)
            def setup():
                el = $("<input type='text'></input>")
                self.$element.append(el)
                self.$element = el
                self.previousValue = None

                self.$element.keydown(def(e):
                    if e.keyCode == 13:
                        self.$element.blur()
                    elif e.keyCode == 27:
                        self.setValue(self.previousValue)
                        self.$element.blur()
                )

                self.$element.keypress(def(e):
                    char = String.fromCharCode( e.charCode ? e.charCode : e.which )
                    if char == PathUtil.getSep():
                        e.preventDefault()
                )

                self.$element.blur(def(e):
                    self.__onEditComplete()
                )

                if value:
                    self.setValue(value)

                self.setEditable(Editable)

            self.subscribe(self.LOADED_HTML, self, setup)

        def __onEditComplete(self):
            if self.previousValue != self.getValue():
                self.notify(self.VALUE_CHANGED, self.getName(), self.getValue())

        def setValue(self, value):
            self.$element.val(value)

        def setFocus(self):
            self.$element.focus()

        def setEditable(self, b):
            if b:
                self.previousValue = self.getValue()
                self.$element.removeAttr("disabled")
                self.$element.css("user-select", "text")
            else:
                self.previousValue = None
                self.$element.attr("disabled","disabled")
                self.$element.css("user-select", "none")


        def getValue(self):
            return self.$element.val()


    # DateTime field
    # Converts timestamp to specified format
    class DateTimeField(EntityField):
        def __init__(self, parentWidget, name=None, timestamp=None, selector=None, dateFormat="dd/MM/yyyy", timeFormat="HH:mm:ss"):
            EntityField.__init__(self, parentWidget, name, selector)

            self.dateFormat = dateFormat
            self.timeFormat = timeFormat

            def setup():
                if timestamp:
                    self.setValue(timestamp)

            self.subscribe(self.LOADED_HTML, self, setup)

        def _update(self):
            now = Date.now()
            t = Math.floor(self.value*1000)
            if now-t > 60*60*23*1000:
                self.$element.text( $.format.date( t , self.dateFormat + " " + self.timeFormat) )
            else:
                self.$element.text( $.format.date( t , self.timeFormat) )

        def setValue(self, value):
            self.value = value
            self._update()

        def getValue(self):
            return self.value

        def setFormat(self, format):
            self.format = format
            self._update()

        def getFormat(self):
            return self.format

    class SizeField(EntityField):
        def __init__(self, parentWidget, name=None, value=None, selector=None):
            EntityField.__init__(self,parentWidget,name,selector)
            self.val = value
            def setup():
                if value:
                    self.setValue(value)
            self.subscribe(self.LOADED_HTML, self, setup)

        def setValue(self, bytes):
            if bytes == null:
                self.$element.text("")
            else:
                f = parseFloat(bytes)
                if bytes > 1000000000:
                    self.$element.text((f/1000000000).toFixed(2) + " GB")
                elif bytes > 1000000:
                    self.$element.text((f/1000000).toFixed(2) + " MB")
                elif bytes > 1000:
                    self.$element.text((f/1000).toFixed(2) + " KB")
                else:
                    self.$element.text(bytes + " B")

            self.val = bytes

        def getValue(self):
            return self.val

    # Static field
    class TextField(EntityField):
        def __init__(self, parentWidget, name=None, value=None, selector=None):
            EntityField.__init__(self, parentWidget, name, selector)
            def setup():
                if value:
                    self.setValue(value)

            self.subscribe(self.LOADED_HTML, self, setup)



    @external
    class defaultType:
        pass

    def FieldFactory(type, value=None, parent=None, selector=None, defaultType=None):
        type = type.toLowerCase()
        if type == "title":
            return TitleField(parent, type, value, selector)
        elif type in ["accessed", "modified", "created"]:
            return DateTimeField(parent, type, value,selector)
        elif type == "size":
            return SizeField(parent, type, value, selector)
        elif defaultType:
            return defaultType(parent, type, value, selector)
        else:
            return None

    return {
        "TitleField": TitleField,
        "DateTimeField": DateTimeField,
        "TextField": TextField,
        "SizeField": SizeField,
        "FieldFactory": FieldFactory
    }