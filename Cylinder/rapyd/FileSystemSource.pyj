"""For server file-system synchronisation
    Planned to support: storing an internally cached tree
"""

@external
class Observable:
    pass

define(["Observable","utf8","PathUtil"], def(Observable, utf8, PathUtil):

    class FileSystemSource(Observable):
        def __init__(self, connection):
            Observable.__init__(self)
            self.connection = connection
            self.CMD_LISTDIR = "list_dir"
            self.CMD_GETPATHSEP = "get_path_separator"
            self.CMD_FETCHCONTENTS = "get_file_contents"
            self.CMD_SETCONTENTS = "set_file_contents"
            self.CMD_MOVEENTITY = "move_entity"

            #self.rootNode = EntityNode(None, "~", "d")

            self.connection.subscribe(self.CMD_LISTDIR, self, self.onDirectoryListing)

        def getConnection(self):
            return self.connection

        def onMovedEntity(self, cb, response):
            if response.status != "Completed" or response.result is False:
                console.log("Unable to move entity", response)
                if cb:
                    cb(False, None,None)
            elif cb:
                cb(response.result, response.data.source, response.data.target)

        def moveEntity(self, path, newPath, cb=None):
            self.connection.sendCommand(self.CMD_MOVEENTITY,
                                        {source: path, target: newPath},
                                        self.onMovedEntity.bind(self,cb))

        def renameEntity(self, path, newName, cb=None):
            parentDir = PathUtil.explode(path)
            parentDir.pop()
            newPath = parentDir.join("/") + "/" + newName
            self.moveEntity(path, newPath, cb)

        def onPathSep(self, cb, response):
            if response.status != "Completed" or response.result is False:
                console.log("Unable to get path separator: ", response)
            else:
                cb(response.data)

        def getPathSeparator(self,cb):
            self.connection.sendCommand(self.CMD_GETPATHSEP,
                                        {},
                                        self.onPathSep.bind(self, cb))

        def onDirectoryListing(self, cb, response):
            if response.status != "Completed" or response.result is False:
                console.log("Unable to get directory listing: ", response)
            else:
                path = response.data.path
                list = response.data.list
                console.log("Got directory listing for " + path)
                if cb:
                    cb(path, list)

        def fetchDirectory(self, path, cb=None):
            self.connection.sendCommand(self.CMD_LISTDIR, {path: path}, self.onDirectoryListing.bind(self,cb))

        def onFileContents(self, cb, response):
            if response.status != "Completed" or response.result is False:
                console.log("Unable to get file contents: ", response)
                if cb:
                    cb(path, None)
            else:
                path = response.data.path
                response.data.data = utf8.decode(response.data.data)

                if cb:
                    cb(path, response.data )

        def onSetFileContents(self, cb, response):
            result = True
            if response.status != "Completed" or response.result is False:
                console.log("Unable to set file contents: ", response)
                result = False

            if cb:
                cb(response.data.path, result)

        def setFileContents(self, path, data, cb=None):
            self.connection.sendCommand(self.CMD_SETCONTENTS, {path: path, data: utf8.encode(data)}, self.onSetFileContents.bind(self,cb))

        def fetchFileContents(self, path, cb=None):
            self.connection.sendCommand(self.CMD_FETCHCONTENTS, {path: path}, self.onFileContents.bind(self, cb))

    return FileSystemSource
)