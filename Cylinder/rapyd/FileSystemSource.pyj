"""For server file-system synchronisation
    Planned to support: storing an internally cached tree
"""

@external
class NamedCallbacks:
    pass

module PathUtil:
    def explode(path, processSpecial):
        pathArr = path.split("/")
        pathClean = []
        for data in pathArr:
            if data.length:
                if processSpecial:
                    if data == ".":  continue
                    if data == "..":
                        pathClean.pop()
                        continue
                pathClean.push(data)
        return pathClean

    def join(*args):
        joinedArgs = []
        for data in args:
            if data instanceof Object: data = data.path
            if data.lastIndexOf("/",0) == 0:
                joinedArgs = []

            joinedArgs.push.apply( joinedArgs, self.explode( data, false) )
        return joinedArgs


class Path:
    def __init__(self, path):
        self.path = path

    def explode(self, processSpecial):
        return PathUtil.explode(self.path, processSpecial)

    def abs(self):
        return "/" + self.explode(true).join("/")

    def join(self, *args):
        args.unshift(self.path)
        self.path = PathUtil.join.apply(this, args).join("/")
        return self

    def getName(self):
        return self.explode().pop()

    def getParentName(self):
        return self.join("..")

    def clone(self):
        return new Path(self.path);


class EntityNode:
    def __init__(self, parentNode, name, type):
        self.parentNode = parentNode
        self.name = name
        self.children = []
        self.type = type

    def getName(self):
        return self.name

    def getParentNode(self):
        return self.parentNode

    def getChildren(self):
        return self.children

    def getType(self):
        return self.type

    def getChildNode(self, name):
        for node in self.children:
            if node.name == name:
                return node
        return None

    def generateParts(self):
        parentParts = []
        if not self.isRoot():
            parentParts.push( self.parentNode.generateParts() )
        parentParts.push(self.name)
        return parentParts

    def isRoot(self):
        return self.parentNode is None

    def getRootNode(self):
        if self.isRoot():
            return self
        return self.parentNode.getRootNode()

    def findNode(self, parts, create=false):
        name = parts[0]
        if name == self.name:
            return self
        childNode = self.getChildNode(name)
        if childNode is not None:
            parts.shift()
            return childNode.findNode(parts)
        elif create:
            root = self
            while parts.length > 0:
                name = parts.shift()
                root.children.push( EntityNode(root, name,"d") )
                root = root.children[root.children.length]
            return root
        return None

#TODO decide on transfer format

class FileSystemSource(NamedCallbacks):
    def __init__(self, connection):
        self.connection = connection
        self.UPDATED = "OnDataUpdate"
        self.REFRESH = "OnRefresh"
        self.CMD_LISTDIR = "list_dir"

        self.rootNode = EntityNode(None, "~", "d")

        self.connection.subscribe(self.CMD_LISTDIR, self.onDirectoryListing.bind(self))

    def onDirectoryListing(self, data):
        path = data.result.path
        console.log("Got directory list for " + path)
        nodePath = self.rootNode.findNode(path, true)
        listing = data.result.list

        self.notify(self.UPDATED, data.path)

    def fetchDirectory(self, path, cb=None):
        if cb is not None:
            this_cb = def(data):
                cb(data)
                self.onDirectoryListing(data)


        self.connection.sendCommand(self.CMD_LISTDIR, {path: path}, this_cb)

